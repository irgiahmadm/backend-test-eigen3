generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Books {
  id                String              @id @default(uuid()) @db.Uuid
  code              String              @db.VarChar(50)
  title             String
  author            String
  stock             Int
  createdAt         DateTime?           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime?           @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  memberBorrowBooks MemberBorrowBooks[]

  @@map("books")
}

model Member {
  id                String              @id @default(uuid()) @db.Uuid
  code              String              @db.VarChar(50)
  name              String
  penalizedEndDate  DateTime?           @map("penalized_end_date") @db.Date
  createdAt         DateTime?           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime?           @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  memberBorrowBooks MemberBorrowBooks[]

  @@map("member")
}

model MemberBorrowBooks {
  id          String    @id @default(uuid()) @db.Uuid
  memberId    String    @map("member_id") @db.Uuid
  bookId      String    @map("book_id") @db.Uuid
  borrowedAt  DateTime  @map("borrowed_at") @db.Timestamp(6)
  hasReturned Int       @default(0) @map("has_returned") @db.SmallInt
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  books       Books     @relation(fields: [bookId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "book_id_borrow_fk")
  member      Member    @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "member_id_borrow_fk")

  @@map("member_borrow_books")
}
